#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
# Copyright muflax <mail@muflax.com>, 2015
# License: GNU GPLv3 (or later) <http://www.gnu.org/copyleft/gpl.html>

# load manual version of trollop because we might not have any gems running
require File.dirname(__FILE__) + "/trollop/lib/trollop"

Opts = Trollop.options do
  opt :verbose,	"verbose output"
  opt :gems,   	"gem folder",              	:default => ENV["HOME"]
  opt :ruby,   	"ruby version",            	:default => "default"
  opt :base,   	"where all the rubies are",	:default => File.expand_path("~/local/rubies")
  opt :rehash, 	"do an automatic rehash?", 	:default => true
  opt :info,   	"print current ruby info"
end

SHELL = {
  :path    	=> "PATH",
  :gem_home	=> "GEM_HOME",
  :gem_path	=> "GEM_PATH",
}

Environment = Struct.new(*SHELL.keys) do
  def self.from_hash(hash)
    values = SHELL.keys.map {|key| hash[key] || nil}
    new(*values)
  end

  def self.from_system_environment(env)
    values = SHELL.map {|key, shell_key| [key, env[shell_key] || nil]}
    self.from_hash(Hash[values])
  end

  def to_shell_commands
    vars = members.map do |m|
      [SHELL[m], self[m]]
    end

    assignments = vars.sort.map do |k, v|
      if v.nil?
        %{unset #{k}}
      else
        %{export #{k}="#{v}"}
      end
    end

    assignments.join("\n")
  end

  def self.reduced_path path
    path.split(/:/).uniq.join(":")
  end
end

class RubyInfo < Struct.new(
  :engine,
  :version,
  :bin_dir,
  :gem_path,
)

  def self.from_this_ruby_process
    new(
      defined?(RUBY_ENGINE) ? RUBY_ENGINE : 'ruby',
      RUBY_VERSION,
      RbConfig::CONFIG.fetch("bindir"),
      Gem.path.join(':'),
    )
  end

  # fork off a new ruby to grab its version, gem path, etc.
  def self.from_ruby_command(ruby_command)
    cmd = "#{ruby_command} #{File.expand_path(__FILE__)} --info"
    ruby_info_string = `#{cmd}`
    unless $?.success?
      raise RuntimeError.new("failed to get ruby info")
    end
    ruby_info = ruby_info_string.split(/\n/)
    unless ruby_info.length == RubyInfo.members.length
      raise RuntimeError.new("ruby info had wrong length")
    end

    new(*ruby_info)
  end

  def to_shell
    members.map{|m| self.send(m)}
  end
end

def activate!
  old_env  	= Environment.from_system_environment(ENV)
  path     	= old_env.path
  ruby_bin 	= File.join(Opts[:base], Opts[:ruby], "bin")
  ruby_info	= RubyInfo.from_ruby_command(File.join(ruby_bin, "ruby"))
  gems     	= File.join(Opts[:gems], ".gem", ruby_info.engine, ruby_info.version)
  gems_bin 	= File.join(gems, "bin")

  new_env = Environment.from_hash(
    :path    	=> Environment.reduced_path("#{gems_bin}:#{ruby_info.bin_dir}:#{path}"),
    :gem_home	=> gems,
    :gem_path	=> Environment.reduced_path("#{gems}:#{ruby_info.gem_path}"),
  )

  $stderr.puts "activating ruby #{ruby_bin} with gems in #{env.gem_home}" if Opts[:verbose]

  puts new_env.to_shell_commands
  puts "rehash" if Opts[:rehash]
end

def ruby_info!
  info = RubyInfo.from_this_ruby_process
  puts info.to_shell
end

# what mode are we in?
if Opts[:info]
  ruby_info!
else
  activate!
end
